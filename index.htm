---
layout: default
---

<h1>Inputs</h1>

<h2>Positive Test Rate (<1): To calculate Optimal Pool Size</h2> 

<p>Input the fraction of tests that are expected to come out positive, based on historical and other data. Use fraction (say 0.02) instead of % (say 2%).</p>

<h2>Pool Size (Optional): To calculate Bayesian Optimal Sub-Pooling</h2>

<p>Input the size of the pool for which Bayesian Optimal Sub-Pooling is to be calculated, if the pooled test is positive.</p>

<h1>Calculator</h1>

<input type="text" placeholder="Positive Test Rate (<1)" id="i">
<input type="text" placeholder="Pool Size (Optional)" id="t">
<button type="button" onclick="main();">Calculate</button>
	
<h1>Results</h1>
	
<h2>Optimal Pool Size</h2>

<div id="result"></div>

<script>
  
function poolsize (i) {
	var res = Math.floor(Math.log(0.5)/Math.log(1-i));
	if (res > 1) return res;
	else return 1;
}

function cir (i, s) {
	return (i/(1-Math.pow((1-i),s)));
}
	
function main () {
 
	var i = document.getElementById("i").value;
	var t = document.getElementById("t").value;;
	var s = poolsize(i);
	var parts;
	var q, r;
	var j;
	
	var out = document.getElementById("result");
	out.innerHTML = '<h3>Optimal number of samples that can be pooled for testing is <b>'+s+'</b>, assuming the Positive Test Rate to be <b>'+i+'</b>, and assuming no dilution due to pooling.</h3>';

	out.innerHTML += '<h2>Baysian Optimal Sub-Pooling</h2>';
	
	s = poolsize(cir(i,t));
	parts = Math.ceil(t/s);
	q = Math.floor(t/parts);
	r = t%parts;

	out.innerHTML += '<h3>If a pool consisting of <b>'+t+' samples</b> is tested positive, it should be further sub-divided into <b>'+parts+'</b> pools of following sizes, assuming the Positive Test Rate to be <b>'+i+'</b>:</h3>';

	for (j=0;j<parts;j++) {
		if (r != 0) {
			out.innerHTML += '<b>'+(q+1)+'</b> ';			
			r--;
		}
		else {
			out.innerHTML += '<b>'+q+'</b> ';
		}
	}	
}
	
</script> 
