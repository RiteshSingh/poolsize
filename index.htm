---
layout: default
---

<h1>Positive Probability Limited Optimal Pool Size Calculator</h1>
<p>This calculates the optimal pool size based on the desired maximum probability of positive pooled tests, and the probability of positive un-pooled tests. Dilution due to pooling is ignored for simplicity.</p> 

<h2>Input</h2>

<h3>Desired Maximum Pooled Test Positive Probability (<1)</h3>
<p>Input the desired maximum probability of positive pooled tests. Use decimal fraction (say 0.5) instead of % (say 50%).</p>

<p>The default value of the desired maximum probability is 0.5, meaning that you want the largest pool size such that at least 50% of the pooled tests are expected to be positive.</p>

<h3>Un-pooled Test Positive Probability (<1)</h3> 

<p>Input the probability of positive un-pooled tests, based on historical and other data. Use decimal fraction (say 0.1) instead of % (say 10%).</p>

<h2>Calculator</h2>

<b>Desired Maximum Pooled Test Positive Probability (<1)</b>
<br>
<input type="text" placeholder="Input 0.5 for 50%" id="p" value="0.5">
<br><br>
<b>Un-pooled Test Positive Probability (<1)</b>
<br>
<input type="text" placeholder="Input 0.1 for 10%" id="i">
<br><br>
<button type="button" onclick="main();">Calculate</button>

<h2>Result</h2>

<div id="result"></div>

<hr>

<h1>Bayesian Positive Probability Limited Optimal Sub-Pool Size Calculator</h1>
<p>This calculates the optimal sub-pool size if the current pool tests positive. It is based on the current pool size, the desired maximum probability of positive sub-pooled tests, and the probability of positive un-pooled tests. Dilution due to pooling is ignored for simplicity.</p>

<h2>Input</h2>

<h3>Desired Maximum Sub-pooled Test Positive Probability (<1)</h3>
<p>Input the desired maximum probability of positive sub-pooled tests. Use decimal fraction (say 0.5) instead of % (say 50%).</p>

<p>The default value of the desired maximum probability is 0.5, meaning that you want the largest sub-pool size such that at least 50% of the sub-pooled tests are expected to be positive.</p>

<h3>Un-pooled Test Positive Probability (<1)</h3> 

<p>Input the probability of positive un-pooled tests, based on historical and other data. Use decimal fraction (say 0.1) instead of % (say 10%).</p>

<h3>Current Pool Size</h3>

<p>Input the number of samples in the current pool, to be sub-pooled on testing postive.</p>

<h2>Calculator</h2>

<b>Desired Maximum Sub-pooled Test Positive Probability (<1)</b>
<br>
<input type="text" placeholder="Input 0.5 for 50%" id="p2" value="0.5">
<br><br>
<b>Un-pooled Test Positive Probability (<1)</b>
<br>
<input type="text" placeholder="Input 0.1 for 10%" id="i2">
<br><br>
<b>Current Pool Size</b>
<br>
<input type="text" placeholder="Input a natural number" id="t2">
<br><br>
<button type="button" onclick="main2();">Calculate</button>
	
<h2>Result</h2>
	
<div id="result2"></div>

<hr>

<h1>No Sub-Pooling Optimal Pool Size Calculator</h1>

<p>This calculates the optimal pool size in cases where sub-pooling is not possible, either due to dilution, limited sample quantity, or other considerations. The optimal pool size in this case is the pool size that minimizes the expected number of tests per individual, that need to be conducted to determine the infection status of all individuals in the pool.</p>

<h2>Input</h2>

<h3>Un-pooled Test Positive Probability (<1)</h3> 

<p>Input the probability of positive un-pooled tests, based on historical and other data. Use decimal fraction (say 0.1) instead of % (say 10%).</p>

<h2>Calculator</h2>

<b>Un-pooled Test Positive Probability (<1)</b>
<br>
<input type="text" placeholder="Input 0.1 for 10%" id="i3">
<button type="button" onclick="main3();">Calculate</button>

<h2>Result</h2>
	
<div id="result3"></div>

<script>
  
function poolsize (p,i) {
	var res = Math.floor(Math.log(1-p)/Math.log(1-i));
	if (res > 1) return res;
	else return 1;
}

function subpoolsize (p2,i2,t2) {
	var k;
	for (k=0;k<t2;k++) if ((1-Math.pow((1-i2),k))/(1-Math.pow((1-i2),t2))>p2) break;
	if (k>2) return (k-1);
	else return 1;
}
	
function main () { 
	var p = document.getElementById("p").value;
	var i = document.getElementById("i").value;
	var s = poolsize(p,i);
	var outp = 1-Math.pow((1-i),s);
	
	var out = document.getElementById("result");
	out.innerHTML = '<h3>Optimal pool size: <b>'+s+'</b> | Positive probability = <b>'+outp.toFixed(4)+'</b></h3>';	
}

function main2 () {
	var p2 = document.getElementById("p2").value;
	var i2 = document.getElementById("i2").value;
	var t2 = document.getElementById("t2").value;
	var	s2 = subpoolsize(p2,i2,t2);
	var outp2 = (1-Math.pow((1-i2),s2))/(1-Math.pow((1-i2),t2));
	var parts = Math.ceil(t2/s2);
	var q = Math.floor(t2/parts);
	var r = t2%parts;
	var j;

	var out2 = document.getElementById("result2");
	out2.innerHTML = '<h3>If a pool of <b>'+t2+' samples</b> is tested positive, sub-dividing it into <b>'+parts+' pools</b> of following sizes would make the sub-pooled test positive probability to be:</h3>';

	for (j=0;j<parts;j++) {
		if (r != 0) {
			out2.innerHTML += '<h3>Optimal sub-pool '+(j+1)+' size: <b>'+(q+1)+'</b> | Positive probability = <b>'+((1-Math.pow((1-i2),q+1))/(1-Math.pow((1-i2),t2))).toFixed(4)+'</b></h3>';			
			r--;
		}
		else {
			out2.innerHTML += '<h3>Optimal sub-pool '+(j+1)+' size: <b>'+(q)+'</b> | Positive probability = <b>'+((1-Math.pow((1-i2),q))/(1-Math.pow((1-i2),t2))).toFixed(4)+'</b></h3>';
		}
	}	
}

function main3 () {
	var i3 = document.getElementById("i3").value;
	var x;
	
	for (x=2;x>1+(1-Math.pow((1-i3),x))*x;x++);
	
	var out3 = document.getElementById("result3");	
	out3.innerHTML += '<h3>Optimal pool size: <b>'+(x-1)+'</b> | Positive probability = <b>'+(1-Math.pow((1-i3),(x-1))).toFixed(4)+'</b></h3>';	
}
	
</script> 
